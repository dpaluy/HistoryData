#!/usr/bin/env ruby

# make Daily files from big csv file
require 'fileutils'
require 'csv'
require 'date'
require 'time'

@start_time = Time.parse("10:20")
@end_time = Time.parse("16:00")

def include?(the_time)
  current = Time.parse(the_time)
  
  if current >= @start_time && current <= @end_time
    return true
  else
    return false
  end
end

def fill_time_range(filename)
  first_line = %x[ head -n 1 #{filename} ]
  last_line = %x[ tail -n 1 #{filename} ]
  raise "Bad File #{filename}" if first_line.empty? || last_line.empty?
    
  ftime, fvalue = first_line.strip.split(',') 
  ltime, lvalue = last_line.strip.split(',') 
  new_first_line = (Time.parse(ftime) > @start_time) ? "#{@start_time.strftime('%H:%M')}, #{fvalue}" : nil
  new_last_line = (Time.parse(ltime) < @end_time) ? "#{@end_time.strftime('%H:%M')}, #{lvalue}" : nil
  
  unless new_first_line.nil? && new_last_line.nil?
    puts "Fill time in #{filename}"
    File.open(filename, 'r+') do |f|
      lines = f.readlines
      new_lines = ([new_first_line].concat(lines).concat([new_last_line])).compact
      f.pos = 0
      f.puts new_lines
    end  
  end
end

def extract_file(infilename)
  @dirname = infilename.gsub('.csv','')
  if File.directory? @dirname
    puts "The folder #{dirname} is already exists. Please delete/rename this folder before start!"
    exit
  else
    FileUtils.mkdir @dirname
  end
  outfile = nil
  current_date = nil
  outfilename = nil
  
  CSV.read(infilename).reject {|x| x.first.nil? }.each_with_index do |row, i|
    next if i == 0 # skip headers
    row[0] = row[0].to_s.strip
    
    the_date = Date.strptime(row[0], "%m/%d/%Y")
    the_time = row[0].split[1] || "0:00"

    next unless include?(the_time)
    
    if (current_date != the_date)
        current_date = the_date
        if !outfile.nil?
          outfile.close
          fill_time_range(outfilename)
        end
        # open new file for writing
        d = the_date.strftime("%Y%m%d") 
        outfilename = "#{infilename.gsub('.csv','')}/#{d}_#{File.basename(infilename).gsub('.csv','')}.csv"
        outfile = File.open(outfilename,'w')
        puts "Open file: #{outfilename}"
      end
      # write line to the file
      outfile.puts "#{the_time},#{row[1]}"
  end
end

##############
#    MAIN    #
##############
if ARGV.length() < 1
  puts "Usage: " + __FILE__ + " filename/folder"
  exit
end

if File.directory?(ARGV[0])
  path = "#{ARGV[0].chomp('/')}/**/*.csv"
  filelist = Dir[path].sort
  filelist.each {|f| extract_file(f) }
else
  extract_file(ARGV[0])
end

